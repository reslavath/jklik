#! /bin/bash

TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
#LOG=/home/dbsup205/postgres_monitoring/log/pgmon_stats_$TIMESTAMP.log
LOG=/home/dbsup205/postgres_monitoring/log/pgmon_stats.log

SQLFILES=/home/dbsup205/postgres_monitoring/sql_files

echo "------------------------------------------------------------------------------------------" >> $LOG
echo "PostgreSQL healthchecks on Host:`hostname`" >> $LOG
echo `date` >> $LOG
echo "------------------------------------------------------------------------------------------" >> $LOG

echo "PostgreSQL service and Config file stats" >>  $LOG
printf '\n'   >> $LOG
#LOG SCRAPPING STARTS HERE
PG_LOG_DIR=`psql postgres -c"show log_directory" -t`

if [[ $PG_LOG_DIR = " pg_log" ]]
        then
                temp_PG_LOG_DIR=`psql postgres -c'show data_directory' -t `
                PG_LOG_DIR=$temp_PG_LOG_DIR\/pg_log
                echo "my log_directory is $PG_LOG_DIR" > /dev/null 2>&1
        else
                PG_LOG_DIR=$PG_LOG_DIR
fi

#checking for VACUUM warnings
database=`grep -i "WARNING"  $PG_LOG_DIR/* | grep "must be vacuumed"  |  awk '{print $7}' | sort | uniq`

        if [[ `echo $database` -eq ' ' ]]  > /dev/null 2>&1
            then
                echo "we are good NO action required with regards to VACUUM"   > /dev/null 2>&1
            else
                echo "DATABASES $database  needs to VACUUMED AS SOON AS POSSIBLE" >> $LOG
        fi

#last_modified_pgconf time of postgresql.conf
        PgConfig=`psql postgres -c"show config_file" -t`
        last_modified_pgconf=`stat $PgConfig | grep Modify |  awk '{print $2,$3}'`
        echo "PostgreSQL config was last modified at            $last_modified_pgconf" >> $LOG



#CHECKING FOR LAST_SHUTDOWN
shutdown_times=`grep "database system is shut down" $PG_LOG_DIR/* | awk '{print $2,$3}' | tail -1`

        if [[ `echo $shutdown_times` -eq ' ' ]]  > /dev/null 2>&1
            then
                echo "we are good DO NOTHING" > /dev/null 2>&1
            else
                echo "PostgreSQL Service was last shutdown at           $shutdown_times" >> $LOG

        fi
#last_modified_hbaconf time of pg_hba.conf
        hbaConfig=`psql postgres -c"show hba_file" -t`
        last_modified_hbaconf=`stat $hbaConfig | grep Modify |  awk '{print $2,$3}'`
        echo "PostgreSQL config was last modified at            $last_modified_hbaconf" >> $LOG

#check for last reload times
reload_times=`grep "received SIGHUP, reloading configuration files" $PG_LOG_DIR/* | awk '{print $2,$3}' | tail -1`
   if [[ `echo $reload_times` -eq ' ' ]]  > /dev/null 2>&1
            then
                echo "we are good DO NOTHING" > /dev/null 2>&1
            else
                echo "PostgreSQL Conf was last reloaded at              $reload_times" >> $LOG
        fi


#sstartup_times
startup_times=`grep "database system was shut down at " $PG_LOG_DIR/* | awk '{print $2,$3}' | tail -1`
        if [[ `echo $startup_times` -eq ' ' ]]  > /dev/null 2>&1
            then
                echo "we are good DO NOTHING" > /dev/null 2>&1
            else
                echo "PostgreSQL service was last started at            $startup_times" >> $LOG
        fi

#PostgreSQL UP and running

up_and_running=`grep "database system is ready to accept connections" $PG_LOG_DIR/* | awk '{print $2,$3}' | tail -1`
        if [[ `echo $up_and_running` -eq ' ' ]]  > /dev/null 2>&1
            then
                echo "we are good DO NOTHING" > /dev/null 2>&1
            else
                echo "PostgreSQL accepting  connections since   $up_and_running" >> $LOG
        fi
echo "------------------------------------------------------------------------------------------" >> $LOG

#printf '\n\n'   >> $LOG


echo "PostgreSQL Configuration checks" >> $LOG
printf '\n'   >> $LOG

curr_wal_level_setting=`psql postgres  -c "show wal_level" -t`
if [ "$curr_wal_level_setting" == " minimal" ];
        then
        echo "PASS:     wal_level=$curr_wal_level_setting" >> $LOG
        else
        echo "FAIL:     wal_level= $curr_wal_level_setting, this should be minimal"  >> $LOG
fi


curr_archive_mode=`psql postgres  -c "show archive_mode" -t`
if [ "$curr_archive_mode" == " on" ];
 then
        echo "PASS:     archive_mode=$curr_archive_mode" >> $LOG
        else
        echo "FAIL:     current setting is archive_mode= $curr_archive_mode, this should be on"  >> $LOG
fi

curr_wal_sync_method=`psql postgres  -c "show wal_sync_method" -t`
if [ "$curr_wal_sync_method" = " fdatasync" ];
        then
        echo "PASS:     wal_sync_method=$curr_wal_sync_method" >> $LOG
        else
        echo "FAIL:     current setting is wal_sync_method=$curr_wal_sync_method this should be fdatasync"  >> $LOG
fi

curr_sync_comm=`psql postgres  -c "show synchronous_commit" -t`
if [ "$curr_sync_comm" = " on" ];
        then
        echo "PASS:     synchronous_commit=$curr_sync_comm" >> $LOG
        else
        echo "FAIL:     current setting is $curr_sync_comm this should be on"  >> $LOG
fi

curr_fsync=`psql postgres  -c "show fsync" -t`
if [ "$curr_fsync" == " on" ];
 then
        echo "PASS:     fsync=$curr_fsync" >> $LOG
        else
        echo "FAIL:     current setting is fsync= $curr_fsync, this should be on"  >> $LOG
fi

curr_autovacuum=`psql postgres  -c "show autovacuum" -t`
if [ "$curr_autovacuum" == " on" ];
 then
        echo "PASS:     autovacuum=$curr_autovacuum" >> $LOG
        else
        echo "FAIL:     current setting is  autovacuum=$curr_autovacuum this should be on"  >> $LOG
fi
echo "------------------------------------------------------------------------------------------" >> $LOG
printf '\n\n'   >> $LOG

echo "PostgreSQL DISK USAGE STATS"  >> $LOG
echo "---------------------------"  >> $LOG
printf '\n'   >> $LOG

databases=`psql postgres  -c 'select datname from pg_database;' -t  | grep -Ev "(postgres|template1|template0)"`

echo "Database sizes " >> $LOG
printf '\n'   >> $LOG

cd $SQLFILES
psql postgres  -c '\i database_sizes.sql' >>  $LOG
echo "-------------------------------------------" >> $LOG
printf '\n'   >> $LOG

for db in $databases; do
        echo "top 20 tables in '$db' database" >>  $LOG
        printf '\n'   >> $LOG
        psql -c'\i table_index_sizes.sql' --dbname=$db >>  $LOG
done
echo "------------------------------------------------------------------------------------------" >> $LOG
printf '\n\n'   >> $LOG

#echo "------------------------------------------------------------------------------------------" >> $LOG
echo "CACHE stats" >> $LOG
printf '\n'   >> $LOG
for db in $databases; do
        echo "TableS/Index cache hit stats in DATABASE $db "  >>  $LOG
        psql -c'\i cache_hit_rate.sql' --dbname=$db >>  $LOG
done
printf '\n'   >> $LOG
echo "------------------------------------------------------------------------------------------" >> $LOG
printf '\n'   >> $LOG


#echo "------------------------------------------------------------------------------------------" >> $LOG
echo "INDEX stats" >> $LOG
echo "-----------" >> $LOG
echo  >> $LOG
for db in $databases; do
        echo "INDEXes USAGE in DATABASE $db "  >>  $LOG
        psql -c'\i index_usage.sql' --dbname=$db >>  $LOG
done
printf '\n'   >> $LOG

for db in $databases; do
        echo "Tables without Primary Key in DATABASE $db "  >>  $LOG
        psql -c'\i  i_tables_with_NO_pk.sql' --dbname=$db >>  $LOG
done
printf '\n'   >> $LOG

for db in $databases; do
        echo " Duplicate indexes in DATABASE $db "  >>  $LOG
        psql -c'\i  i_duplicate_indexes.sql' --dbname=$db >>  $LOG
done
printf '\n'   >> $LOG

for db in $databases; do
        echo "Unused indexes in DATABASE $db "  >>  $LOG
        psql -c'\i  i_unused_indexes.sql' --dbname=$db >>  $LOG
done
printf '\n'   >> $LOG
for db in $databases; do
        echo " Foreign keys with no  indexes in DATABASE $db "  >>  $LOG
        psql -c'\i  i_fk_no_index.sql' --dbname=$db >>  $LOG
done
printf '\n'   >> $LOG
for db in $databases; do
        echo "Tables where new indexes are requied in DATABASE $db "  >>  $LOG
        psql -c'\i  i_needed_indexes.sql' --dbname=$db >>  $LOG
done
echo "------------------------------------------------------------------------------------------" >> $LOG
printf '\n'   >> $LOG

echo "BLOAT Check" >> $LOG
echo "-----------" >> $LOG
printf '\n'   >> $LOG
for db in $databases; do
        echo "INDEX BLOATING STATS FOR DATABASE $db "  >>  $LOG
        psql -c'\i  index_bloat_check.sql' --dbname=$db >>  $LOG
        printf '\n'   >> $LOG
        echo "TABLE BLOATING STATS" FOR DATABASE $db  >>  $LOG
        psql -c'\i  table_bloat_check.sql' --dbname=$db >>  $LOG
done
echo "------------------------------------------------------------------------------------------" >> $LOG
printf '\n'   >> $LOG

echo "AUTOVACUUM/VACUUM STATS"  >> $LOG
echo "-----------------------"  >> $LOG

printf '\n'   >> $LOG

for db in $databases; do
        echo " LAST AUTOVACUUM/VACUUM TIMES  FOR DATABASE $db "  >>  $LOG
        psql -c'\i  last_vacuum_times.sql' --dbname=$db >>  $LOG
done

echo "Which tables are overdue for an aggressive vacuum to prevent xid wraparound?" >> $LOG
printf '\n'   >> $LOG
for db in $databases; do
        echo " AUTOVACUUM STATS FOR DATABASE $db "  >>  $LOG
        psql -c'\i  overdue_for_aggressive_autovacuum.sql' --dbname=$db >>  $LOG
done
printf '\n'   >> $LOG

echo "Which tables are overdue for a vacuum on account of having dead rows?" >> $LOG
printf '\n'   >> $LOG
for db in $databases; do
        echo " AUTOVACUUM STATS FOR DATABASE $db "  >>  $LOG
        psql -c'\i  overdue_for_autovacuum.sql' --dbname=$db >>  $LOG
done
echo "------------------------------------------------------------------------------------------" >> $LOG
printf '\n'   >> $LOG

echo "ERRORS/WARNINGS from PostgreSQL Logs" >>  $LOG
echo

echo
#scrapping for FATAL/PANIC ERRORS
scrape_logs=`find $PG_LOG_DIR/*  -mtime -1  -print | grep -v csv |grep .log`
        for outout in `echo $scrape_logs`
        do
                egrep 'FATAL|PANIC' $outout  >> $LOG
        done
echo "------------------------------------------------------------------------------------------" >> $LOG

echo "END" >> $LOG

exit
